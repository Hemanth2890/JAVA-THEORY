class Person{
    private String name;
    public String getName(){
        return name;
    }
    public void setName(String newName){
        this.name=newName;
    }
}
class Main{
    public static void main(String args[]){
        Person myObj=new Person();
        myObj.setName("John");
        System.out.println(myObj.getName());
    }
}

class Vehicle{
    protected String brand = "Ford";
    public void honk(){
        System.out.println("Tuut, tuut!");
    }
}
class car extends Vehicle{
    private String model="Mustang";
    public static void main(String args[]){
        car myCar=new car();
        myCar.honk();
        System.out.println(myCar.brand+" "+myCar.model);
    }
}

class Animal{
    public void animalSound(){
        System.out.println("The animal makes a sound ");
    }
}
class Pig extends Animal{
    public void animalSound(){
        System.out.println("Pig says: wee wee");
    }
}
class Dog extends Animal{
    public void animalSound(){
        System.out.println("Dog says: bow bow");
    }
}
class Main{
    public static void main(String args[]){
        Animal myAnimal=new Animal();
        Animal myPig=new Pig();
        Animal myDog=new Dog();
        myAnimal.animalSound();
        myPig.animalSound();
        myDog.animalSound();
    }
}

class OuterClass{
    int x=5;
    class InnerClass{
        int y=10;
    }
}
class Main{
    public static void main(String args[]){
        OuterClass o = new OuterClass();
        OuterClass.InnerClass i = o.new InnerClass();
        System.out.println(i.y+o.x);
    }
}

class OuterClass{
    int x=5;
    static class InnerClass{
        int y=10;
    }
}
class Main{
    public static void main(String args[]){
        OuterClass.InnerClass i = new OuterClass.InnerClass();
        System.out.println(i.y);
    }
}

class OuterClass{
    int x=5;
    class InnerClass{
        public int inM(){
            return x;
        }
    }
}
class Main{
    public static void main(String args[]){
        OuterClass o = new OuterClass();
        OuterClass.InnerClass i = o.new InnerClass();
        System.out.println(i.inM());
    }
}

abstract class Animal{
    public abstract void animalSound();
        public void sleep(){
        System.out.println("Zzz");
    }
}
class Pig extends Animal{
    public void animalSound(){
        System.out.println("Pig says: wee wee");
    }
}
class Main{
    public static void main(String args[]){
        Pig p =new Pig();
        p.animalSound();
        p.sleep();
    }
}

interface Animal{
    public void animalSound();
    public void sleep();
}
class Pig implements Animal{
    public void animalSound(){
        System.out.println("Pig says: wee wee");
    }
    public void sleep(){
        System.out.println("Zzz");
    }
}
class Main{
    public static void main(String args[]){
        Pig p =new Pig();
        p.animalSound();
        p.sleep();
    }
}


